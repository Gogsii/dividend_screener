{"version":3,"sources":["constants/actionTypes.js","reducers/posts.js","reducers/auth.js","reducers/index.js","components/Navbar/styles.js","components/Navbar/Navbar.js","components/Posts/Post/styles.js","api/index.js","actions/posts.js","components/Posts/Post/Post.js","components/Posts/styles.js","components/Posts/Posts.js","components/Form/styles.js","components/Form/Form.js","styles.js","components/Home/Home.js","components/Auth/styles.js","components/Auth/Input.js","components/Auth/icon.js","components/Auth/Auth.js","actions/auth.js","App.js","index.js"],"names":["CREATE","UPDATE","DELETE","FETCH_ALL","LIKE","AUTH","LOGOUT","posts","action","type","payload","map","post","_id","filter","authReducer","state","authData","localStorage","setItem","JSON","stringify","data","clear","combineReducers","auth","makeStyles","theme","appBar","borderRadius","margin","display","flexDirection","justifyContent","alignItems","padding","heading","color","textDecoration","image","marginLeft","toolbar","width","profile","userName","brandContainer","purple","palette","getContrastText","deepPurple","backgroundColor","Navbar","classes","useStyles","dispatch","useDispatch","history","useHistory","location","useLocation","useState","parse","getItem","user","setUser","useEffect","logout","token","decode","exp","Date","getTime","AppBar","className","position","Typography","component","Link","to","variant","align","Toolbar","Avatar","alt","result","name","src","imageUrl","charAt","Button","onClick","push","media","height","paddingTop","backgroundBlendMode","border","fullHeightCard","card","overlay","top","left","overlay2","right","grid","details","title","cardActions","API","axios","create","baseURL","interceptors","request","use","req","headers","authorization","likePost","id","patch","updatePost","updatedPost","deletePost","delete","signIn","formData","signUp","createPost","a","newPost","console","log","api","Post","setCurrentId","Likes","likes","length","find","like","googleId","fontSize","Card","CardMedia","selectedFile","moment","createdAt","fromNow","creator","style","size","tags","tag","gutterBottom","CardContent","message","CardActions","disabled","mainContainer","smMargin","spacing","actionDiv","textAlign","Posts","useSelector","Grid","container","item","xs","sm","CircularProgress","root","paper","form","flexWrap","fileInput","buttonSubmit","marginBottom","Form","currentId","postData","setPostData","p","handleSubmit","e","preventDefault","Paper","autoComplete","noValidate","onSubmit","TextField","label","fullWidth","value","onChange","target","split","multiple","onDone","base64","paddingLeft","breakpoints","down","Home","get","Grow","in","Container","justify","marginTop","avatar","secondary","main","submit","googleButton","Input","handleChange","half","autoFocus","handleShowPassword","required","InputProps","endAdornment","InputAdornment","IconButton","icon","viewBox","fill","d","initialState","firstName","lastName","email","password","confirmPassword","Auth","showPassword","setShowPassword","isSignup","setIsSignup","setFormData","googleSuccess","res","profileObj","tokenId","error","maxWidth","elevation","router","signup","signin","prevShowPassword","clientId","render","renderProps","startIcon","onSuccess","onFailure","cookiePolicy","prevIsSignup","App","maxwidth","path","exact","store","createStore","reducers","compose","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.924a7616.chunk.js","sourcesContent":["export const CREATE = 'CREATE';\r\nexport const UPDATE = 'UPDATE';\r\nexport const DELETE = 'DELETE';\r\nexport const FETCH_ALL = 'FETCH_ALL';\r\nexport const LIKE = 'LIKE';\r\n\r\nexport const AUTH = 'AUTH';\r\nexport const LOGOUT = 'LOGOUT';","/*a reducer is a function that accepts the state and the action\r\n//based on the action type it does some logic\r\n//in reducers the state always must be initialized to something\r\n//our 'state' will always be post, because we are in the posts reducer\r\n//so can just put posts as the state\r\n*/\r\n\r\nimport { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\r\nconst posts = (posts = [], action) => {\r\n\r\n    switch(action.type) {\r\n        case FETCH_ALL:\r\n            return action.payload;\r\n        case CREATE:\r\n            return [...posts, action.payload];\r\n        case UPDATE:\r\n            return posts.map((post) => post._id === action.payload._id ? action.payload : post ); //in this case the payload is the newly Updated post, otherwise return non-Updated post\r\n        case DELETE:\r\n            return posts.filter((post) => post._id !== action.payload); //keep all the posts, except for the one that is equal to the id we want to delete\r\n        case LIKE:\r\n            return posts.map((post) => post._id === action.payload._id ? action.payload : post ); //check which post changed/liked, return the changed post, or if no like, return post as it was\r\n        default:\r\n            return posts;\r\n    }\r\n}\r\n\r\nexport default posts;\r\n","import { AUTH, LOGOUT } from '../constants/actionTypes';\r\n\r\nconst authReducer = (state = { authData: null }, action) => {\r\n    switch (action.type) {\r\n        case AUTH: \r\n            localStorage.setItem('profile', JSON.stringify( {...action?.data } )); //saving user credentials to local storage\r\n            return { ...state, authData: action?.data };\r\n        case LOGOUT:\r\n            localStorage.clear();\r\n            return { ...state, authData: null };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default authReducer;","import { combineReducers } from \"redux\";\r\nimport posts from './posts';\r\nimport auth from \"./auth\";\r\n\r\n\r\nexport default combineReducers({ posts, auth });","import { makeStyles } from '@material-ui/core/styles';\r\nimport { deepPurple } from '@material-ui/core/colors';\r\n\r\nexport default makeStyles((theme) => ({\r\n  appBar: {\r\n    borderRadius: 15,\r\n    margin: '30px 0',\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    padding: '10px 50px',\r\n  },\r\n  heading: {\r\n    color: 'rgba(0,183,255, 1)',\r\n    textDecoration: 'none',\r\n  },\r\n  image: {\r\n    marginLeft: '15px',\r\n  },\r\n  toolbar: {\r\n    display: 'flex',\r\n    justifyContent: 'flex-end',\r\n    width: '400px',\r\n  },\r\n  profile: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    width: '400px',\r\n  },\r\n  userName: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  brandContainer: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  purple: {\r\n    color: theme.palette.getContrastText(deepPurple[500]),\r\n    backgroundColor: deepPurple[500],\r\n  },\r\n}));","import React, { useState, useEffect } from 'react';\r\nimport { Link, useHistory, useLocation } from 'react-router-dom';\r\nimport { AppBar, Avatar, Button, Toolbar, Typography } from '@material-ui/core';\r\nimport { useDispatch } from 'react-redux';\r\nimport decode from 'jwt-decode';\r\n\r\n//import dividendstocks from '../../images/dividendstocks.jpg';\r\n//import authReducer from '../../reducers/auth';\r\n\r\n\r\nimport useStyles from './styles';\r\n\r\nconst Navbar = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    const [user, setUser] = useState(JSON.parse(localStorage.getItem('profile'))); //here we attempt to fetch the user from local storage and set it as the current state\r\n    \r\n    const logout = () => {\r\n        dispatch({ type: 'LOGOUT' });\r\n\r\n        history.push('/');\r\n\r\n        setUser(null);\r\n    };\r\n\r\n    //using useEffect to help navigate automatically instead of manually\r\n    useEffect((logout, user) => {\r\n        const token = user?.token;\r\n        \r\n        if (token) {\r\n            const decodedToken = decode(token);\r\n        \r\n            if (decodedToken.exp * 1000 < new Date().getTime()) logout();\r\n          }\r\n        \r\n        setUser(JSON.parse(localStorage.getItem('profile')));\r\n    }, [location]); //location here refers to url changing from /auth to just '/'\r\n\r\n    return(\r\n    <AppBar className={ classes.appBar } position='static' color='inherit'>\r\n        <div className={classes.brandContainer}>\r\n            <Typography component={Link} to='/' className={ classes.heading } variant='h2' align='center'>Dividend Stock Screener</Typography>\r\n           {/* <img className={ classes.image } src={ dividendstocks } alt='logo' height='220' /> */}\r\n        </div>\r\n        <Toolbar className={classes.toolbar}>\r\n            {user ? (\r\n                <div className={classes.profile}>\r\n                    <Avatar className={classes.purple} alt={user.result.name} src={user.result.imageUrl}>{user.result.name.charAt(0)}</Avatar>\r\n                    <Typography className={classes.userName} variant='h6'>{user.result.name}</Typography>\r\n                    <Button variant='contained' className={classes.logout} onClick={logout}>Logout</Button>\r\n                </div>\r\n            ) : (\r\n                <Button component={Link} to='/auth' variant='contained' color='primary'>Log In</Button>\r\n            )}\r\n        </Toolbar>\r\n\r\n    </AppBar>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport default makeStyles({\r\n  media: {\r\n    height: 0,\r\n    paddingTop: '56.25%',\r\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n    backgroundBlendMode: 'darken',\r\n  },\r\n  border: {\r\n    border: 'solid',\r\n  },\r\n  fullHeightCard: {\r\n    height: '100%',\r\n  },\r\n  card: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'space-between',\r\n    borderRadius: '15px',\r\n    height: '100%',\r\n    position: 'relative',\r\n  },\r\n  overlay: {\r\n    position: 'absolute',\r\n    top: '20px',\r\n    left: '20px',\r\n    color: 'white',\r\n  },\r\n  overlay2: {\r\n    position: 'absolute',\r\n    top: '20px',\r\n    right: '20px',\r\n    color: 'white',\r\n  },\r\n  grid: {\r\n    display: 'flex',\r\n  },\r\n  details: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    margin: '20px',\r\n  },\r\n  title: {\r\n    padding: '0 16px',\r\n  },\r\n  cardActions: {\r\n    padding: '0 16px 8px 16px',\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n  },\r\n});","import axios from 'axios';\r\n\r\nconst API = axios.create({ baseURL: 'https://dividend-screener.herokuapp.com' });\r\n\r\n//adding something specific to each one of our requests, sending the token to the backend middleware for authentication\r\n//with this our backend can get access to the specific header and decode the data, we're sending the token to the backend to verify that we are actually logged in\r\nAPI.interceptors.request.use((req) => {\r\n    if(localStorage.getItem('profile')) { //this is where the token is stored, in the profile\r\n        req.headers.authorization = `Bearer ${JSON.parse(localStorage.getItem('profile')).token}`;\r\n    }\r\n    return req; //must return the initial request so that we are able to return all the subsequent requests below\r\n});\r\n\r\n//this is the url pointing to our frontend route, obv its localhost now\r\n//as its currently setup localhost 3000 just returns all the posts we have in the database\r\n\r\n//const url = 'http://localhost:3001/posts'; //this is when testing on home comp\r\n\r\n//const url = 'https://dividend-screener.herokuapp.com/posts';\r\n\r\nexport const fetchPosts = () => API.get('/posts'); //very important to remember to export\r\nexport const createPost = (newPost) => API.post('/posts', newPost); \r\nexport const likePost = (id) => API.patch(`/posts/${id}/likePost`); //to implement abiilty to like post only once we need to implement accounts (full auth system registration login, accounts etc)\r\nexport const updatePost = (id, updatedPost) => API.patch(`/posts/${id}`, updatedPost); //we now have the defined url, but also passing in the id to update\r\nexport const deletePost = (id) => API.delete(`/posts/${id}`); //we now have the defined url, but also passing in the id to update\r\n\r\nexport const signIn = (formData) => API.post('/user/signin', formData);\r\nexport const signUp = (formData) => API.post('/user/signup', formData);","//these are the actions dispatched in App.js with\r\n//  useEffect( () => { dispatch( getPosts() ); }, [dispatch] );\r\n\r\nimport { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\r\nimport * as api from '../api'; //import everything from the actions as api\r\n\r\n//GET POST ACTION\r\nexport const getPosts = () => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.fetchPosts();\r\n        dispatch({ type: FETCH_ALL, payload: data });\r\n    } catch (error) {\r\n        console.log(error.message);\r\n    }\r\n};\r\n\r\n//CREATE POST ACTION\r\nexport const createPost = (post) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.createPost(post);\r\n        dispatch({ type: CREATE, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n//UPDATE POST ACTION\r\nexport const updatePost = (id, post) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.updatePost(id, post); //this is returning the updated post as a response, we then destructure the response and get the data\r\n        dispatch({ type: UPDATE, payload: data });\r\n    } catch (error) {\r\n        console.log(error); //console logging just the error instead of error.message will give you more info\r\n    }\r\n}\r\n\r\n//DELETE POST ACTION\r\nexport const deletePost = (id) => async (dispatch) => {\r\n    try {\r\n        await api.deletePost(id); //no destructuring data since we're not interested in the returned data, we're just deleting the post when recieved\r\n        dispatch({ type: DELETE, payload: id });\r\n    } catch (error) {\r\n        console.log(error); //console logging just the error instead of error.message will give you more info\r\n    }\r\n}\r\n\r\n//LIKE POST ACTION\r\n//to implement abiilty to like post only once we need to implement accounts (full auth system registration login, accounts etc)\r\nexport const likePost = (id) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.likePost(id); //\r\n        dispatch({ type: LIKE, payload: data });\r\n    } catch (error) {\r\n        console.log(error); //console logging just the error instead of error.message will give you more info\r\n    }\r\n}","import React from \"react\";\r\nimport { Card, CardActions, CardContent, CardMedia, Button, Typography } from '@material-ui/core';\r\nimport ThumbUpAltOutlined from '@material-ui/icons/ThumbUpAltOutlined';\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport moment from 'moment';\r\nimport useStyles from './styles';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { deletePost, likePost } from \"../../../actions/posts\";\r\n\r\nconst Post = ({ post, setCurrentId }) => {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const user = JSON.parse(localStorage.getItem('profile'));\r\n\r\n    //creating a subcomponent of the Post component, called Likes to keep track of likes on the frontend. This is the <Likes /> component further below.\r\n    const Likes = () => {\r\n        if(post.likes.length > 0) {\r\n            return post.likes.find( ( like ) => like === ( user?.result?.googleId || user?.result?._id ))\r\n                ? (\r\n                    <><ThumbUpAltIcon fontSize='small' />&nbsp;{post.likes.length > 2 ? `You and ${post.likes.length - 1} others` : `${post.likes.length} like ${post.likes.length > 1 ? 's' : ''}` }</>\r\n                ) : (\r\n                    <><ThumbUpAltOutlined fontSize='small' />&nbsp;{post.likes.length} {post.likes.length === 1 ? 'Like' : 'Likes'} </>\r\n                );\r\n        }\r\n\r\n        return <><ThumbUpAltOutlined fontSize='small' />&nbsp;Like</>\r\n    };\r\n \r\n    return (\r\n        <Card className={classes.card}>\r\n            <CardMedia className={classes.media} image={post.selectedFile} title={post.title} />\r\n\r\n            <div className={classes.overlay}>\r\n                <Typography variant=\"h6\">{post.name}</Typography>\r\n                <Typography variant=\"body2\">{moment(post.createdAt).fromNow()}</Typography>\r\n            </div>\r\n\r\n            {( user?.result?.googleId === post?.creator || user?.result?._id === post?.creator ) && (\r\n                <div className={classes.overlay2}>\r\n                    <Button style={{color: \"white\"}} size=\"small\" onClick={() => setCurrentId(post._id)}>\r\n                        <MoreHorizIcon fontSize=\"medium\" />\r\n                    </Button>\r\n                </div>\r\n            )}\r\n\r\n            <div className={classes.details}>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">{post.tags.map((tag) => `#${tag} `)}</Typography>\r\n            </div>\r\n\r\n            <Typography className={classes.title} variant=\"h5\" gutterBottom>{post.title}</Typography>\r\n\r\n            <CardContent>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">{post.message}</Typography>\r\n            </CardContent>\r\n\r\n            <CardActions className={classes.cardActions}>\r\n                <Button size=\"small\"  color=\"primary\" disabled={!user?.result} onClick={() => dispatch(likePost(post._id))}>\r\n                    <Likes />\r\n                </Button>\r\n        \r\n                {( user?.result?.googleId === post?.creator || user?.result?._id === post?.creator ) && (\r\n                    <Button size=\"small\" color=\"primary\" onClick={() => dispatch(deletePost(post._id) )}>\r\n                        <DeleteIcon fontSize=\"small\" />Delete\r\n                    </Button>\r\n                )}\r\n            </CardActions>\r\n\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Post;","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport default makeStyles((theme) => ({\r\n  mainContainer: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  smMargin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  actionDiv: {\r\n    textAlign: 'center',\r\n  },\r\n}));","//this is the component that fetches the data from the global Redux store and presents it to the user\r\n\r\nimport React from 'react';\r\nimport { Grid, CircularProgress } from '@material-ui/core';\r\nimport { useSelector } from 'react-redux'; //lets us tap into the store\r\n\r\nimport Post from './Post/Post';\r\nimport useStyles from './styles';\r\n\r\nconst Posts = ({ setCurrentId }) => {\r\n    const posts = useSelector((state) => state.posts); //initialized as a hook\r\n    const classes = useStyles();\r\n\r\n    console.log(posts);\r\n\r\n    //because we're mapping within the 'real' posts, we can send individual value of post to each post component\r\n    return (\r\n        !posts.length ? <CircularProgress /> : (\r\n            <Grid className={ classes.container } container alignItems=\"stretch\" spacing={3}>\r\n                { posts.map((post) => (\r\n                    <Grid key={ post.id} item xs={12} sm={6}>\r\n                        <Post post={ post } setCurrentId={ setCurrentId } /> {/*sending in post and setCurrentID as props via props drilling*/}\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        )\r\n    )\r\n}\r\n\r\nexport default Posts;","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport default makeStyles((theme) => ({\r\n  root: {\r\n    '& .MuiTextField-root': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n  },\r\n  form: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'center',\r\n  },\r\n  fileInput: {\r\n    width: '97%',\r\n    margin: '10px 0',\r\n  },\r\n  buttonSubmit: {\r\n    marginBottom: 10,\r\n  },\r\n}));","//this is also where we are dealing with the update logic\r\n\r\nimport React, {useState, useEffect} from 'react';\r\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\r\nimport FileBase from 'react-file-base64';\r\nimport useStyles from './styles';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { createPost, updatePost } from '../../actions/posts';\r\n\r\nconst Form = ({ currentId, setCurrentId }) => {\r\n    const [postData, setPostData] = useState({\r\n        //creator: '',\r\n        title: '',\r\n        message: '',\r\n        tags: '',\r\n        selectedFile: ''\r\n    });\r\n    const post = useSelector((state) => currentId ? state.posts.find((p) => p._id === currentId) : null);    //we don't want to fecth data for all the posts, only for the post being updated\r\n    const classes = useStyles();    //setting classes to equal material ui's styling\r\n    const dispatch = useDispatch(); //setting up dispatch from redux to be able to dispacth actions\r\n    const user = JSON.parse(localStorage.getItem('profile'));\r\n\r\n    useEffect(() => {               //the second parameter asks when should the callback be ran, when what changes?\r\n        if(post) {\r\n            setPostData(post);\r\n        }\r\n    }, [post])         \r\n\r\n    const handleSubmit = async (e) => {   //Functions for form submission and clearing of form\r\n        e.preventDefault();         //prevent refreshing of browser\r\n        \r\n        if(currentId) {\r\n            dispatch(updatePost({ ...postData, name: user?.result?.name }));\r\n        } else {\r\n            dispatch(createPost({ ...postData, name: user?.result?.name }));\r\n        }\r\n        clear(); //clears the form whether the user submits new stock or edits and existing\r\n    };\r\n\r\n    //shows the below msg if no user is logged in\r\n    if(!user?.result?.name) {\r\n        return(\r\n            <Paper className={classes.paper}>\r\n                <Typography variant='h6' align='center'>\r\n                    Please sign in to build your own dividend screener.\r\n                </Typography>\r\n            </Paper>\r\n        )\r\n    };\r\n\r\n    const clear = () => {\r\n        setCurrentId(null);\r\n        setPostData({\r\n            //creator: '',\r\n            title: '',\r\n            message: '',\r\n            tags: '',\r\n            selectedFile: ''\r\n        })\r\n    };\r\n\r\n    //what the form looks like on the frontend\r\n    return (\r\n        <Paper className={classes.paper}>\r\n            <form autoComplete='off' noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\r\n                <Typography variant='h6'>{currentId ? 'Editing' : 'Creating'} a Stock</Typography>\r\n                    {/*<TextField name='creator' variant='outlined' label='Creator'  fullWidth value={postData.creator}  onChange={ (e) => setPostData({ ...postData, creator: e.target.value }) }/> */}\r\n                    <TextField \r\n                        name='title' \r\n                        variant='outlined'\r\n                        label='Title' \r\n                        fullWidth\r\n                        value={postData.title}\r\n                        onChange={ (e) => setPostData({ ...postData, title: e.target.value }) }\r\n                    />\r\n                    <TextField \r\n                        name='message' \r\n                        variant='outlined'\r\n                        label='Message' \r\n                        fullWidth\r\n                        value={postData.message}\r\n                        onChange={ (e) => setPostData({ ...postData, message: e.target.value }) }\r\n                    />\r\n                    <TextField \r\n                        name='tags' \r\n                        variant='outlined'\r\n                        label='Tags' \r\n                        fullWidth\r\n                        value={postData.tags}\r\n                        onChange={ (e) => setPostData({ ...postData, tags: e.target.value.split(',') }) }\r\n                    />\r\n                <div className={classes.fileInput}>\r\n                    <FileBase\r\n                        type='file'\r\n                        multiple={false}\r\n                        onDone={({ base64 }) => setPostData({ ...postData, selectedFile: base64 })}\r\n                    />\r\n                </div>\r\n                <Button \r\n                    className={classes.buttonSubmit} \r\n                    variant='contained' \r\n                    color='primary' \r\n                    size='large'\r\n                    type='submit'\r\n                    fullWidth>Submit</Button>\r\n                <Button \r\n                    variant='contained' \r\n                    color='secondary' \r\n                    size='small'\r\n                    onClick={clear}\r\n                    fullWidth>Clear</Button>\r\n            </form>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default Form;","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport default makeStyles((theme) => ({\r\n  appBar: {\r\n    borderRadius: 15,\r\n    margin: '30px 0',\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  heading: {\r\n    color: 'rgba(0,183,255, 1)',\r\n  },\r\n  image: {\r\n    margin: '5px',\r\n    paddingLeft: '30px',\r\n    width: '40%',\r\n  },\r\n\r\n  [theme.breakpoints.down('sm')]: {\r\n    mainContainer: {\r\n      flexDirection: \"column-reverse\"\r\n    },\r\n    image: {\r\n      margin: '0',\r\n      width: '100%',\r\n      borderRadius: '10px',\r\n    },\r\n    appBar: { \r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      justifyContent: 'center',\r\n     }\r\n    }\r\n\r\n}));","import React, { useState, useEffect } from 'react';\r\nimport { Container, Grow, Grid } from '@material-ui/core';\r\nimport Posts from '../Posts/Posts';\r\nimport Form from '../Form/Form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { getPosts } from '../../actions/posts';\r\nimport useStyles from '../../styles';\r\n\r\n\r\nconst Home = () => {\r\n    const [currentId, setCurrentId] = useState(null); //sets the state of current ID to be null if no ID is selected\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch(); //hook used to dipatch actions\r\n  \r\n    //a way to actually dispatch the action, similar to componentDidMount, componentDidUpdate and componentWillUpdate \r\n    //we're telling react to run this “effect” function after flushing changes to the DOM.\r\n    //effects are ran after every render, including the first\r\n    useEffect( () => {\r\n      dispatch( getPosts() ); //dispatching the action created and exported in '/actions.posts'\r\n    }, [currentId, dispatch] );\r\n\r\n    return (\r\n    <Grow in>\r\n        <Container>\r\n            <Grid className={classes.mainContainer} container justify='space-between' alignItems='stretch' spacing={3}>\r\n            <Grid item xs={12} sm={7}>\r\n                <Posts setCurrentId={setCurrentId}/>\r\n            </Grid>\r\n            <Grid item xs={12} sm={4}>\r\n                <Form currentId={currentId} setCurrentId={setCurrentId}/>\r\n            </Grid>    \r\n            </Grid>\r\n        </Container>\r\n    </Grow>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport default makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(2),\r\n  },\r\n  root: {\r\n    '& .MuiTextField-root': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  googleButton: {\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n}));\r\n","import React from 'react';\r\nimport { TextField, Grid, InputAdornment, IconButton } from '@material-ui/core';\r\n\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\n\r\nconst Input = ({ name, label, handleChange, half, autoFocus, type, handleShowPassword }) => (\r\n  <Grid item xs={12} sm={half ? 6 : 12}>\r\n    <TextField\r\n      name={name}\r\n      onChange={handleChange}\r\n      variant=\"outlined\"\r\n      required\r\n      fullWidth\r\n      label={label}\r\n      autoFocus={autoFocus}\r\n      type={type}\r\n      InputProps={name === 'password' ? {\r\n        endAdornment: (\r\n          <InputAdornment position=\"end\">\r\n            <IconButton onClick={handleShowPassword}>\r\n              {type === 'password' ? <Visibility /> : <VisibilityOff />}\r\n            </IconButton>\r\n          </InputAdornment>\r\n        ),\r\n      } : null}\r\n    />\r\n  </Grid>\r\n);\r\n\r\nexport default Input;","import React from 'react';\r\n\r\nconst icon = () => (\r\n  <svg style={{ width: '20px', height: '20px' }} viewBox=\"0 0 24 24\">\r\n    <path\r\n      fill=\"currentColor\"\r\n      d=\"M21.35,11.1H12.18V13.83H18.69C18.36,17.64 15.19,19.27 12.19,19.27C8.36,19.27 5,16.25 5,12C5,7.9 8.2,4.73 12.2,4.73C15.29,4.73 17.1,6.7 17.1,6.7L19,4.72C19,4.72 16.56,2 12.1,2C6.42,2 2.03,6.8 2.03,12C2.03,17.05 6.16,22 12.25,22C17.6,22 21.5,18.33 21.5,12.91C21.5,11.76 21.35,11.1 21.35,11.1V11.1Z\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport default icon;","import React, { useState } from 'react';\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { Avatar, Button, Paper, Grid, Typography, Container } from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\n\r\nimport { signin, signup } from '../../actions/auth';\r\nimport { AUTH } from '../../constants/actionTypes';\r\n\r\nimport useStyles from './styles';\r\nimport Input from './Input';\r\nimport Icon from './icon';\r\n\r\nconst initialState = { firstName: '', lastName: '', email: '', password: '', confirmPassword: ''};\r\n\r\nconst Auth = () => {\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [isSignup, setIsSignup] = useState(false); //using array destructuring to set default state to be not signed up, takes 2 params, state and callback to run in re-render\r\n    const [formData, setFormData] = useState(initialState); //setting the state for email/password fields\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    \r\n    const handleShowPassword = () => setShowPassword( (prevShowPassword) => !prevShowPassword) //this toggles the show pw on/off\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); //always add this to form submits, to prevent default behavior of browsers to refresh upon form submit\r\n        \r\n        if(isSignup) {\r\n            dispatch(signup( formData, history )); //we pass the form data to have in the database, and the history object so that we can navigate once something happens\r\n        } else {\r\n            dispatch(signin( formData, history )); //we pass the form data to have in the database, and the history object so that we can navigate once something happens\r\n        }\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        setFormData({ ...formData, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const switchMode = () => {\r\n        (setIsSignup( (prevIsSignup) => !prevIsSignup )); //switches the state on/off from false to true like a switch\r\n        setShowPassword(false); //resets the show password when switching between signup/signin\r\n    };  \r\n\r\n    const googleSuccess = async (res) => {\r\n        //special optional chaining operator ?. is not going to throw an error if we don't have access to the res object\r\n        const result = res?.profileObj;\r\n        const token = res?.tokenId;\r\n        \r\n        try {\r\n            dispatch({type: AUTH, data: { result, token } }); //dispatching action type and payload\r\n            history.push('/'); //navigate user back to home after logging in\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        console.log(res);\r\n    };\r\n\r\n    //if sign up with google fails, return why\r\n    const googleFailure = (error) => {\r\n        console.log(error);\r\n        console.log('Google Sign In was unsuccessful. Try Again Later.')\r\n    };\r\n\r\n    return (\r\n        <Container component='main' maxWidth='xs'>\r\n            <Paper className={classes.paper} elevation={3}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography variant='h5'>{ isSignup ? 'Sign Up' : 'Sign In' }</Typography>\r\n                <form className={classes.form} onSubmit={handleSubmit}>\r\n                    <Grid container spacing={2}>\r\n                        { isSignup && (\r\n                        <>\r\n                            <Input name='firstName' label='First Name' handleChange={handleChange} autoFocus half/>\r\n                            <Input name='lastName' label='Last Name' handleChange={handleChange} half/>\r\n                        </>\r\n                        )}\r\n                        <Input name='email' label='Email Address' type='email' handleChange={handleChange} />\r\n                        <Input name='password' label='Password' type={showPassword ? 'text' : 'password'} handleShowPassword={handleShowPassword} handleChange={handleChange}/>\r\n                        { isSignup && <Input name='confirmPassword' label='Repeat Password' type='password' handleChange={handleChange}/> }\r\n                    </Grid>\r\n                    <Button type='submit' fullWidth variant='contained' color='primary' className={classes.submit}>\r\n                        { isSignup ? 'Sign Up' : 'Sign In'}\r\n                    </Button>\r\n                    <GoogleLogin \r\n                        clientId='941971253122-02s9drkrmvukt8fha77buslca1u4g40u.apps.googleusercontent.com'\r\n                        render={(renderProps) => (\r\n                            <Button className={classes.googleButton} color='primary' fullWidth onClick={renderProps.onClick} disabled={renderProps.disabled} startIcon={<Icon />} variant='contained' >\r\n                                Google Sign In\r\n                            </Button>\r\n                        )}\r\n                        onSuccess={googleSuccess}\r\n                        onFailure={googleFailure}\r\n                        cookiePolicy='single_host_origin'\r\n                    />\r\n                    <Grid container justify='flex-end'>\r\n                        <Button onClick={switchMode}>\r\n                            {isSignup ? 'Already have an account? Sign In' : 'Don\\'t have an account? Sign Up'}\r\n                        </Button>\r\n                    </Grid>\r\n                </form>\r\n            </Paper>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Auth;\r\n","import { AUTH } from '../constants/actionTypes';\r\nimport * as api from '../api/index.js'; //import everything from the actions as api\r\n\r\n//\r\nexport const signin = (formData, router) => async (dispatch) => {\r\n    try {\r\n        //log user in\r\n        const { data } = await api.signIn(formData);\r\n\r\n        dispatch({ type: AUTH, data });\r\n\r\n        router.push('/');\r\n    } catch (error) {\r\n        console.log(error.message);\r\n    }\r\n};\r\n\r\n//\r\nexport const signup = (formData, router) => async (dispatch) => {\r\n    try {\r\n        //sign user up\r\n        const { data } = await api.signUp(formData);\r\n\r\n        dispatch({ type: AUTH, data });\r\n\r\n        router.push('/');\r\n    } catch (error) {\r\n        console.log(error.message);\r\n    }\r\n};","import React from 'react';\r\nimport { Container } from '@material-ui/core';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\n\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport Home from './components/Home/Home';\r\nimport Auth from './components/Auth/Auth';\r\n\r\nconst App = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Container maxwidth='lg'>\r\n        <Navbar />\r\n        <Switch>\r\n          <Route path='/' exact component={Home} />\r\n          <Route path='/auth' exact component={Auth} />\r\n        </Switch>\r\n      </Container>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'; //keeps track of the store aka the global state, allows us to access the state from anywhere inside the app\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport reducers from './reducers'\r\n\r\nimport App from './App';\r\nimport './index.css';\r\n\r\n//to set redux we first have to create store\r\nconst store = createStore( reducers, compose( applyMiddleware(thunk) ));\r\n\r\nReactDOM.render(\r\n  <Provider store={ store }>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n//import reportWebVitals from './reportWebVitals';\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}