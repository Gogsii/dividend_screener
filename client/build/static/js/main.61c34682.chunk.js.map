{"version":3,"sources":["constants/actionTypes.js","reducers/posts.js","reducers/index.js","api/index.js","components/Posts/Post/styles.js","components/Posts/Post/Post.js","actions/posts.js","components/Posts/styles.js","components/Posts/Posts.js","components/Form/styles.js","components/Form/Form.js","images/dividendstocks.jpg","styles.js","App.js","index.js"],"names":["CREATE","UPDATE","DELETE","FETCH_ALL","LIKE","posts","action","type","payload","map","post","_id","filter","combineReducers","url","updatePost","id","updatedPost","axios","patch","deletePost","delete","likePost","makeStyles","media","height","paddingTop","backgroundColor","backgroundBlendMode","border","fullHeightCard","card","display","flexDirection","justifyContent","borderRadius","position","overlay","top","left","color","overlay2","right","grid","details","margin","title","padding","cardActions","Post","setCurrentId","dispatch","useDispatch","classes","useStyles","Card","className","CardMedia","image","selectedFile","Typography","variant","creator","moment","createdAt","fromNow","Button","style","size","onClick","fontSize","tags","tag","gutterBottom","CardContent","component","message","CardActions","a","api","data","console","log","likeCount","theme","mainContainer","alignItems","smMargin","spacing","actionDiv","textAlign","Posts","useSelector","state","length","Grid","container","item","xs","sm","CircularProgress","root","paper","form","flexWrap","fileInput","width","buttonSubmit","marginBottom","Form","currentId","useState","postData","setPostData","find","p","useEffect","clear","Paper","autoComplete","noValidate","onSubmit","e","preventDefault","newPost","createPost","TextField","name","label","fullWidth","value","onChange","target","split","multiple","onDone","base64","appBar","heading","breakpoints","down","App","get","Container","maxwidth","AppBar","align","src","dividendstocks","alt","Grow","in","justify","store","createStore","reducers","compose","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61c34682.chunk.js","sourcesContent":["export const CREATE = 'CREATE';\r\nexport const UPDATE = 'UPDATE';\r\nexport const DELETE = 'DELETE';\r\nexport const FETCH_ALL = 'FETCH_ALL';\r\nexport const LIKE = 'LIKE';","/*a reducer is a function that accepts the state and the action\r\n//based on the action type it does some logic\r\n//in reducers the state always must be initialized to something\r\n//our 'state' will always be post, because we are in the posts reducer\r\n//so can just put posts as the state\r\n*/\r\n\r\nimport { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\r\nconst posts = (posts = [], action) => {\r\n\r\n    switch(action.type) {\r\n        case FETCH_ALL:\r\n            return action.payload;\r\n        case CREATE:\r\n            return [...posts, action.payload];\r\n        case UPDATE:\r\n            return posts.map((post) => post._id === action.payload._id ? action.payload : post ); //in this case the payload is the newly Updated post, otherwise return non-Updated post\r\n        case DELETE:\r\n            return posts.filter((post) => post._id !== action.payload); //keep all the posts, except for the one that is equal to the id we want to delete\r\n        case LIKE:\r\n            return posts.map((post) => post._id === action.payload._id ? action.payload : post ); //check which post changed/liked, return the changed post, or if no like, return post as it was\r\n        default:\r\n            return posts;\r\n    }\r\n}\r\n\r\nexport default posts;\r\n","import { combineReducers } from \"redux\";\r\nimport posts from './posts';\r\n\r\n\r\nexport default combineReducers({ posts });","import axios from 'axios';\r\n\r\n//this is the url pointing to our frontend route, obv its localhost now\r\n//as its currently setup localhost 3000 just returns all the posts we have in the database\r\n\r\n//const url = 'http://localhost:3001/posts'; //this is when testing on home comp\r\n\r\nconst url = 'https://dividend-screener.herokuapp.com/posts';\r\n\r\nexport const fetchPosts = () => axios.get(url); //very important to remember to export\r\nexport const createPost = (newPost) => axios.post(url, newPost); \r\nexport const updatePost = (id, updatedPost) => axios.patch(`${url}/${id}`, updatedPost); //we now have the defined url, but also passing in the id to update\r\nexport const deletePost = (id) => axios.delete(`${url}/${id}`); //we now have the defined url, but also passing in the id to update\r\nexport const likePost = (id) => axios.patch(`${url}/${id}/likePost`); //to implement abiilty to like post only once we need to implement accounts (full auth system registration login, accounts etc)","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport default makeStyles({\r\n  media: {\r\n    height: 0,\r\n    paddingTop: '56.25%',\r\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n    backgroundBlendMode: 'darken',\r\n  },\r\n  border: {\r\n    border: 'solid',\r\n  },\r\n  fullHeightCard: {\r\n    height: '100%',\r\n  },\r\n  card: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'space-between',\r\n    borderRadius: '15px',\r\n    height: '100%',\r\n    position: 'relative',\r\n  },\r\n  overlay: {\r\n    position: 'absolute',\r\n    top: '20px',\r\n    left: '20px',\r\n    color: 'white',\r\n  },\r\n  overlay2: {\r\n    position: 'absolute',\r\n    top: '20px',\r\n    right: '20px',\r\n    color: 'white',\r\n  },\r\n  grid: {\r\n    display: 'flex',\r\n  },\r\n  details: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    margin: '20px',\r\n  },\r\n  title: {\r\n    padding: '0 16px',\r\n  },\r\n  cardActions: {\r\n    padding: '0 16px 8px 16px',\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n  },\r\n});","import React from \"react\";\r\nimport { Card, CardActions, CardContent, CardMedia, Button, Typography } from '@material-ui/core';\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport moment from 'moment';\r\nimport useStyles from './styles';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { deletePost, likePost } from \"../../../actions/posts\";\r\n\r\nconst Post = ({ post, setCurrentId }) => {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.card}>\r\n            <CardMedia className={classes.media} image={post.selectedFile} title={post.title} />\r\n            <div className={classes.overlay}>\r\n                <Typography variant=\"h6\">{post.creator}</Typography>\r\n                <Typography variant=\"body2\">{moment(post.createdAt).fromNow()}</Typography>\r\n            </div>\r\n            <div className={classes.overlay2}>\r\n                <Button \r\n                    style={{color: \"white\"}} \r\n                    size=\"small\" \r\n                    onClick={() => setCurrentId(post._id)}>\r\n                    <MoreHorizIcon fontSize=\"medium\" />\r\n                </Button>\r\n            </div>\r\n            <div className={classes.details}>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">{post.tags.map((tag) => `#${tag} `)}</Typography>\r\n            </div>\r\n            <Typography className={classes.title} variant=\"h5\" gutterBottom>{post.title}</Typography>\r\n            <CardContent>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">{post.message}</Typography>\r\n            </CardContent>\r\n            <CardActions className={classes.cardActions}>\r\n                <Button \r\n                    size=\"small\" \r\n                    color=\"primary\" \r\n                    onClick={() => dispatch(likePost(post._id))}>\r\n                    <ThumbUpAltIcon fontSize=\"small\" />\r\n                    &nbsp; Like &nbsp;\r\n                    {post.likeCount}\r\n                </Button>\r\n                <Button \r\n                    size=\"small\" \r\n                    color=\"primary\" \r\n                    onClick={() => dispatch(deletePost(post._id))}>\r\n                    <DeleteIcon fontSize=\"small\" />\r\n                    Delete\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n\r\n    )\r\n}\r\n\r\nexport default Post;","//these are the actions dispatched in App.js with\r\n//  useEffect( () => { dispatch( getPosts() ); }, [dispatch] );\r\n\r\nimport { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\r\nimport * as api from '../api'; //import everything from the actions as api\r\n\r\n//Action Creators + Redux Thunk for asynchronous data\r\n//const action = { type: 'FETCH_ALL', payload: [] } //payload is the data, i.e. where all the posts are stored\r\n\r\n\r\n//GET POST ACTION\r\nexport const getPosts = () => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.fetchPosts();\r\n        dispatch({ type: FETCH_ALL, payload: data });\r\n    } catch (error) {\r\n        console.log(error.message);\r\n    }\r\n};\r\n\r\n//CREATE POST ACTION\r\nexport const createPost = (post) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.createPost(post);\r\n        dispatch({ type: CREATE, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n//UPDATE POST ACTION\r\nexport const updatePost = (id, post) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.updatePost(id, post); //this is returning the updated post as a response, we then destructure the response and get the data\r\n        dispatch({ type: UPDATE, payload: data });\r\n    } catch (error) {\r\n        console.log(error); //console logging just the error instead of error.message will give you more info\r\n    }\r\n}\r\n\r\n//DELETE POST ACTION\r\nexport const deletePost = (id) => async (dispatch) => {\r\n    try {\r\n        await api.deletePost(id); //no destructuring data since we're not interested in the returned data, we're just deleting the post when recieved\r\n        dispatch({ type: DELETE, payload: id });\r\n    } catch (error) {\r\n        console.log(error); //console logging just the error instead of error.message will give you more info\r\n    }\r\n}\r\n\r\n//LIKE POST ACTION\r\n//to implement abiilty to like post only once we need to implement accounts (full auth system registration login, accounts etc)\r\nexport const likePost = (id) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.likePost(id); //\r\n        dispatch({ type: LIKE, payload: data });\r\n    } catch (error) {\r\n        console.log(error); //console logging just the error instead of error.message will give you more info\r\n    }\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport default makeStyles((theme) => ({\r\n  mainContainer: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  smMargin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  actionDiv: {\r\n    textAlign: 'center',\r\n  },\r\n}));","//this is the component that fetches the data from the global Redux store and presents it to the user\r\n\r\nimport React from 'react';\r\nimport { Grid, CircularProgress } from '@material-ui/core';\r\nimport { useSelector } from 'react-redux'; //lets us tap into the store\r\n\r\nimport Post from './Post/Post';\r\nimport useStyles from './styles';\r\n\r\nconst Posts = ({ setCurrentId }) => {\r\n    const posts = useSelector((state) => state.posts); //initialized as a hook\r\n    const classes = useStyles();\r\n\r\n    console.log(posts);\r\n\r\n    //because we're mapping withing the 'real' posts, we can send individual value of post to each post component\r\n    return (\r\n        !posts.length ? <CircularProgress /> : (\r\n            <Grid className={ classes.container } container alignItems=\"stretch\" spacing={3}>\r\n                { posts.map((post) => (\r\n                    <Grid key={ post.id} item xs={12} sm={6}>\r\n                        <Post post={ post } setCurrentId={ setCurrentId } /> {/*sending in post and setCurrentID as props via props drilling*/}\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        )\r\n    )\r\n}\r\n\r\nexport default Posts;","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport default makeStyles((theme) => ({\r\n  root: {\r\n    '& .MuiTextField-root': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n  },\r\n  form: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'center',\r\n  },\r\n  fileInput: {\r\n    width: '97%',\r\n    margin: '10px 0',\r\n  },\r\n  buttonSubmit: {\r\n    marginBottom: 10,\r\n  },\r\n}));","//this is also where we are dealing with the update logic\r\n\r\nimport React, {useState, useEffect} from 'react';\r\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\r\nimport FileBase from 'react-file-base64';\r\nimport useStyles from './styles';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { createPost, updatePost } from '../../actions/posts';\r\n\r\nconst Form = ({ currentId, setCurrentId }) => {\r\n    const [postData, setPostData] = useState({\r\n        creator: '',\r\n        title: '',\r\n        message: '',\r\n        tags: '',\r\n        selectedFile: ''\r\n    });\r\n    const post = useSelector((state) => currentId ? state.posts.find((p) => p._id === currentId) : null);    //we don't want to fecth data for all the posts, only for the post being updated\r\n    const classes = useStyles();    //setting classes to equal material ui's styling\r\n    const dispatch = useDispatch(); //setting up dispatch from redux to be able to dispacth actions\r\n\r\n    useEffect(() => {               //the second parameter asks when should the callback be ran, when what changes?\r\n        if(post) {\r\n            setPostData(post);\r\n        }\r\n    }, [post])         \r\n\r\n    const handleSubmit = (e) => {   //Functions for form submission and clearing of form\r\n        e.preventDefault();         //prevent refreshing of browser\r\n        if(currentId) {\r\n            dispatch(updatePost(currentId, postData));\r\n        } else {\r\n            dispatch(createPost(postData));\r\n        }\r\n        clear(); //clears the form whether the user submits new stock or edits and existing\r\n    };\r\n    const clear = () => {\r\n        setCurrentId(null);\r\n        setPostData({\r\n            creator: '',\r\n            title: '',\r\n            message: '',\r\n            tags: '',\r\n            selectedFile: ''\r\n        })\r\n    };\r\n\r\n    //what the form looks like on the frontend\r\n    return (\r\n        <Paper className={classes.paper}>\r\n            <form autoComplete='off' noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\r\n                <Typography variant='h6'>{currentId ? 'Editing' : 'Creating'} a Stock</Typography>\r\n                    <TextField \r\n                        name='creator' \r\n                        variant='outlined'\r\n                        label='Creator' \r\n                        fullWidth\r\n                        value={postData.creator}\r\n                        onChange={ (e) => setPostData({ ...postData, creator: e.target.value }) }\r\n                    />\r\n                    <TextField \r\n                        name='title' \r\n                        variant='outlined'\r\n                        label='Title' \r\n                        fullWidth\r\n                        value={postData.title}\r\n                        onChange={ (e) => setPostData({ ...postData, title: e.target.value }) }\r\n                    />\r\n                    <TextField \r\n                        name='message' \r\n                        variant='outlined'\r\n                        label='Message' \r\n                        fullWidth\r\n                        value={postData.message}\r\n                        onChange={ (e) => setPostData({ ...postData, message: e.target.value }) }\r\n                    />\r\n                    <TextField \r\n                        name='tags' \r\n                        variant='outlined'\r\n                        label='Tags' \r\n                        fullWidth\r\n                        value={postData.tags}\r\n                        onChange={ (e) => setPostData({ ...postData, tags: e.target.value.split(',') }) }\r\n                    />\r\n                <div className={classes.fileInput}>\r\n                    <FileBase\r\n                        type='file'\r\n                        multiple={false}\r\n                        onDone={({ base64 }) => setPostData({ ...postData, selectedFile: base64 })}\r\n                    />\r\n                </div>\r\n                <Button \r\n                    className={classes.buttonSubmit} \r\n                    variant='contained' \r\n                    color='primary' \r\n                    size='large'\r\n                    type='submit'\r\n                    fullWidth>Submit</Button>\r\n                <Button \r\n                    variant='contained' \r\n                    color='secondary' \r\n                    size='small'\r\n                    onClick={clear}\r\n                    fullWidth>Clear</Button>\r\n            </form>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default Form;","export default __webpack_public_path__ + \"static/media/dividendstocks.1dd46e60.jpg\";","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport default makeStyles((theme) => ({\r\n  appBar: {\r\n    borderRadius: 15,\r\n    margin: '30px 0',\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  heading: {\r\n    color: 'rgba(0,183,255, 1)',\r\n  },\r\n  image: {\r\n    margin: '0',\r\n    width: '50%',\r\n  },\r\n\r\n  [theme.breakpoints.down('sm')]: {\r\n    mainContainer: {\r\n      flexDirection: \"column-reverse\"\r\n    },\r\n    image: {\r\n      margin: '0',\r\n      width: '100%',\r\n      borderRadius: '10px',\r\n    },\r\n    appBar: { \r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      justifyContent: 'center',\r\n     }\r\n    }\r\n\r\n}));","import React, { useState, useEffect } from 'react';\r\nimport { Container, AppBar, Typography, Grow, Grid } from '@material-ui/core';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { getPosts } from './actions/posts';\r\nimport Posts from './components/Posts/Posts';\r\nimport Form from './components/Form/Form';\r\nimport dividendstocks from './images/dividendstocks.jpg';\r\nimport useStyles from './styles';\r\n\r\nconst App = () => {\r\n  const [currentId, setCurrentId] = useState(null); //sets the state of current ID to be null if no ID is selected\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch(); //hook used to dipatch actions\r\n\r\n  //a way to actually dispatch the action, initially its the componentDidMount, but then it turns into componentWillUpdate \r\n  useEffect( () => {\r\n    dispatch( getPosts() ); //dispatching the action created and exported in '/actions.posts'\r\n  }, [currentId, dispatch] );\r\n  return (\r\n    <Container maxwidth='lg'>\r\n      <AppBar className={ classes.appBar} position='static' color='inherit'>\r\n        <Typography className={ classes.heading } variant='h2' align='center'>Dividend Stock Screener</Typography>\r\n        <img className={ classes.image } src={ dividendstocks } alt='logo' height='220' />\r\n      </AppBar>\r\n      <Grow in>\r\n        <Container>\r\n          <Grid className={classes.mainContainer} container justify='space-between' alignItems='stretch' spacing={3}>\r\n            <Grid item xs={12} sm={7}>\r\n              <Posts setCurrentId={setCurrentId}/>\r\n            </Grid>\r\n            <Grid item xs={12} sm={4}>\r\n              <Form currentId={currentId} setCurrentId={setCurrentId}/>\r\n            </Grid>    \r\n          </Grid>\r\n        </Container>\r\n      </Grow>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'; //keeps track of the store aka the global state, allows us to access the state from anywhere inside the app\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport reducers from './reducers'\r\n\r\nimport App from './App';\r\nimport './index.css';\r\n\r\n//to set redux we first have to create store\r\nconst store = createStore( reducers, compose( applyMiddleware(thunk) ));\r\n\r\nReactDOM.render(\r\n  <Provider store={ store }>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n//import reportWebVitals from './reportWebVitals';\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}